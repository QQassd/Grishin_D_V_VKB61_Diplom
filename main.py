import tkinter as tk
from tkinter import scrolledtext, messagebox
import threading
import logging
from scanner import scan_forms
from tester import run_tests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename="reports/log.txt", level=logging.INFO, format="%(asctime)s - %(message)s")

class SecurityTesterApp:
    def init(self, root):
        self.root = root
        self.root.title("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        self.root.geometry("600x500")

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ URL
        self.url_label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ URL:")
        self.url_label.pack()
        self.url_entry = tk.Entry(root, width=50)
        self.url_entry.pack()

        # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—ã"
        self.scan_button = tk.Button(root, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—ã", command=self.scan_site)
        self.scan_button.pack()

        # –û–∫–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
        self.result_text = scrolledtext.ScrolledText(root, width=70, height=10)
        self.result_text.pack()

        # –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏"
        self.test_button = tk.Button(root, text="üõ° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏", command=self.start_testing)
        self.test_button.pack()

        # –û–∫–Ω–æ –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(root, width=70, height=10)
        self.log_text.pack()
        self.update_logs()

    def scan_site(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞"""
        url = self.url_entry.get()
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL!")
            return

        self.result_text.delete(1.0, tk.END)
        forms = scan_forms(url)

        if forms:
            for form in forms:
                self.result_text.insert(tk.END, f"–§–æ—Ä–º–∞: {form['action']} ({form['method']})\n")
                for field in form["inputs"]:
                    self.result_text.insert(tk.END, f"  –ü–æ–ª–µ: {field['name']} ({field['type']})\n")
                self.result_text.insert(tk.END, "-" * 50 + "\n")
        else:
            self.result_text.insert(tk.END, "–§–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n")

    def start_testing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        url = self.url_entry.get()
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL!")
            return

        threading.Thread(target=self.run_tests_thread, args=(url,), daemon=True).start()

    def run_tests_thread(self, url):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ"""
        messagebox.showinfo("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.")
        run_tests(url)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    def update_logs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ –≤ –æ–∫–Ω–µ"""
        try:
            with open("reports/log.txt", "r", encoding="utf-8") as log_file:
                self.log_text.delete(1.0, tk.END)
                self.log_text.insert(tk.END, log_file.read())
        except FileNotFoundError:
            self.log_text.insert(tk.END, "–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç...\n")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self.root.after(1000, self.update_logs)

if name == "main":
    root = tk.Tk()
    app = SecurityTesterApp(root)
    root.mainloop()
